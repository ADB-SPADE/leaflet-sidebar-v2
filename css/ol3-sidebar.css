.sidebar {
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  width: 100%;
  overflow: hidden;
  z-index: 2000; }
  .sidebar.collapsed {
    width: 40px; }
  @media (min-width: 768px) {
    .sidebar {
      left: 6px;
      top: 6px;
      bottom: 6px;
      transition: width 500ms; } }
  @media (min-width: 768px) and (max-width: 991px) {
    .sidebar {
      width: 305px; } }
  @media (min-width: 992px) and (max-width: 1199px) {
    .sidebar {
      width: 390px; } }
  @media (min-width: 1200px) {
    .sidebar {
      width: 460px; } }

.sidebar-tabs {
  position: absolute;
  top: 0;
  bottom: 0;
  width: 40px;
  height: 100%;
  margin: 0;
  padding: 0;
  background-color: rgba(0, 60, 136, 0.5); }
  .sidebar-tabs > li {
    width: 100%;
    height: 40px;
    color: #fff;
    font-size: 12pt;
    overflow: hidden;
    transition: all 80ms; }
    .sidebar-tabs > li:hover {
      color: #fff;
      background-color: rgba(0, 60, 136, 0.6); }
    .sidebar-tabs > li.active {
      color: #fff;
      background-color: #0074d9; }
    .sidebar-tabs > li.disabled {
      color: white; }
      .sidebar-tabs > li.disabled:hover {
        background: transparent; }
      .sidebar-tabs > li.disabled > a {
        cursor: default; }
    .sidebar-tabs > li > a {
      display: block;
      width: 100%;
      height: 100%;
      line-height: 40px;
      color: inherit;
      text-decoration: none;
      text-align: center; }

.sidebar-content {
  position: absolute;
  left: 40px;
  right: 0;
  top: 0;
  bottom: 0;
  background-color: rgba(255, 255, 255, 0.95);
  overflow-x: hidden;
  overflow-y: auto; }
  .sidebar.collapsed > .sidebar-content {
    overflow-y: hidden; }

.sidebar-pane {
  display: none;
  right: 0;
  box-sizing: border-box;
  padding: 10px 20px; }
  .sidebar-pane.active {
    display: block; }
  @media (min-width: 768px) and (max-width: 991px) {
    .sidebar-pane {
      width: 265px; } }
  @media (min-width: 992px) and (max-width: 1199px) {
    .sidebar-pane {
      width: 350px; } }
  @media (min-width: 1200px) {
    .sidebar-pane {
      width: 420px; } }

.sidebar-heading {
  margin: -10px -20px 0;
  height: 40px;
  padding: 0 20px;
  line-height: 40px;
  font-size: 14.4pt;
  color: #fff;
  background-color: #0074d9; }

.sidebar-close {
  position: absolute;
  right: 0;
  top: 0;
  width: 40px;
  height: 40px;
  text-align: center;
  cursor: pointer; }

.sidebar {
  background-color: rgba(255, 255, 255, 0.4);
  border-right: 3px solid transparent; }
  @media (min-width: 768px) {
    .sidebar {
      border: 3px solid transparent;
      border-radius: 4px; } }

.sidebar-tabs {
  overflow: hidden; }
  @media (min-width: 768px) {
    .sidebar-tabs {
      border-radius: 2px 0 0 2px; }
      .collapsed .sidebar-tabs {
        border-radius: 2px; } }

@media (min-width: 768px) {
  .sidebar-content {
    border-radius: 0 2px 2px 0; } }

@media (min-width: 768px) {
  .sidebar.collapsed ~ .sidebar-map .ol-zoom {
    margin-left: 52px; } }

.sidebar-map .ol-zoom {
  margin-left: 46px; }
  @media (min-width: 768px) {
    .sidebar-map .ol-zoom {
      transition: margin-left 500ms; } }
  @media (min-width: 768px) and (max-width: 991px) {
    .sidebar-map .ol-zoom {
      margin-left: 317px; } }
  @media (min-width: 992px) and (max-width: 1199px) {
    .sidebar-map .ol-zoom {
      margin-left: 402px; } }
  @media (min-width: 1200px) {
    .sidebar-map .ol-zoom {
      margin-left: 472px; } }

/*# sourceMappingURL=data:application/json;base64,*/